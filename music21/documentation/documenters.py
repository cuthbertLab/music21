# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------------
# Name:         documentation/library/documenters.py
# Purpose:      music21 documentation helper classes for proper formatting
#
# Authors:      Josiah Wolf Oberholtzer
#               Michael Scott Cuthbert
#
# Copyright:    Copyright Â© 2013-15 Michael Scott Cuthbert and the music21 Project
# License:      LGPL or BSD, see license.txt
#------------------------------------------------------------------------------

import inspect
import re
import types
import unittest

from music21 import common
from music21.exceptions21 import Music21Exception
from music21.ext import six

if six.PY3:
    unicode = str # @ReservedAssignment

class Documenter(object):
    '''
    Abstract base class for documenting classes.
    '''
    def run(self):
        raise NotImplementedError

    def __repr__(self):
        raise NotImplementedError

    ### PRIVATE PROPERTIES ###

    @property
    def _packagesystemPath(self):
        return '.'.join((
            self.__class__.__module__,
            self.__class__.__name__,
            ))

    ### PUBLIC PROPERTIES ###

    @property
    def rstEditingWarningFormat(self):
        result = []
        result.append('.. WARNING: DO NOT EDIT THIS FILE:')
        result.append('   AUTOMATICALLY GENERATED.')
        result.append('   PLEASE EDIT THE .py FILE DIRECTLY.')
        result.append('')
        return result

    ### PUBLIC METHODS ###

    @staticmethod
    def makeHeading(text, heading_level):
        if not text or not isinstance(text, six.string_types):
            raise Music21Exception("make heading requires text")
        heading_characters = ['=', '-', '^', '"']
        result = [text]
        result.append(heading_characters[heading_level - 1] * len(text))
        result.append('')
        return result

    @staticmethod
    def makeRubric(text):
        return ['.. rubric:: {}'.format(text), '']


class ObjectDocumenter(Documenter):
    '''
    Base class for object documenting sub-classes. such as ClassDocumenter
    '''

    _DOC_ATTR = {'referent': 'the object being documented'}
    ### INITIALIZER ###

    def __init__(self, referent):
        self.referent = referent

    ### PUBLIC PROPERTIES ###

    def referentPackagesystemPath(self):
        raise NotImplementedError

    def rstAutodocDirectiveFormat(self):
        raise NotImplementedError

    @property
    def rstCrossReferenceString(self):
        return ':{0}:`~{1}`'.format(
            self.sphinxCrossReferenceRole,
            self.referentPackagesystemPath,
            )

    def sphinxCrossReferenceRole(self):
        raise NotImplementedError


class FunctionDocumenter(ObjectDocumenter):
    '''
    A documenter for one function:

    >>> function = common.opFrac
    >>> documenter = documentation.documenters.FunctionDocumenter(function)
    >>> documenter
    <music21.documentation.documenters.FunctionDocumenter: music21.common.numberTools.opFrac>

    >>> documenter.rstCrossReferenceString
    ':func:`~music21.common.numberTools.opFrac`'

    >>> for line in documenter.rstAutodocDirectiveFormat:
    ...     line
    '.. autofunction:: music21.common.numberTools.opFrac'
    ''

    Call the documenter to generate its ReStructuredText format:

    >>> restructuredText = documenter.run()
    >>> restructuredText
    ['.. autofunction:: music21.common.numberTools.opFrac', '']
    '''

    ### INITIALIZER ###

    def __init__(self, referent=None):
        if not isinstance(referent, types.FunctionType):
            raise Music21Exception("referent must be a function")
        ObjectDocumenter.__init__(self, referent)

    ### SPECIAL METHODS ###

    def run(self):
        result = []
        result.extend(self.rstAutodocDirectiveFormat)
        return result

    def __repr__(self):
        return '<{0}: {1}>'.format(
            self._packagesystemPath,
            self.referentPackagesystemPath,
            )

    ### PUBLIC PROPERTIES ###

    @property
    def referentPackagesystemPath(self):
        '''
        >>> function = common.opFrac
        >>> documenter = documentation.documenters.FunctionDocumenter(function)
        >>> documenter.referentPackagesystemPath
        'music21.common.numberTools.opFrac'
        '''
        path = '.'.join((
            self.referent.__module__,
            self.referent.__name__,
            ))
        return path.replace('.__init__', '')

    @property
    def rstAutodocDirectiveFormat(self):
        '''
        >>> function = common.opFrac
        >>> documenter = documentation.documenters.FunctionDocumenter(function)
        >>> documenter.rstAutodocDirectiveFormat
        ['.. autofunction:: music21.common.numberTools.opFrac', '']
        '''
        result = []
        referentPackagesystemPath = self.referentPackagesystemPath.replace(
            '.__init__', '')
        result.append('.. autofunction:: {0}'.format(
            referentPackagesystemPath,
            ))
        result.append('')
        return result

    @property
    def sphinxCrossReferenceRole(self):
        '''
        returns 'func'
        '''
        return 'func'


class MemberDocumenter(ObjectDocumenter):
    '''
    Abstract base class for documenting class members such as Methods and Attributes and Properties    

    '''

    _DOC_ATTR = {'memberName': 'the short name of the member, for instance "mode"',
                 'referent': '''the attribute or method itself, such as (no quotes)
                                key.KeySignature.mode''',
                 'definingClass': '''the class the referent belongs to, such as (no quotes)
                                key.KeySignature'''                
                }

    ### INITIALIZER ###

    def __init__(self, referent, memberName, definingClass):
        if not isinstance(definingClass, six.class_types):
            raise Music21Exception("referent must be a class, not {0}".format(referent))
        ObjectDocumenter.__init__(self, referent)
        self.memberName = memberName
        self.definingClass = definingClass

    ### SPECIAL METHODS ###

    def run(self):
        result = []
        result.extend(self.rstAutodocDirectiveFormat)
        return result

    def __repr__(self):
        referentPath = '.'.join((
            self.definingClass.__module__,
            self.definingClass.__name__,
            self.memberName,
            ))
        return '<{0}: {1}>'.format(
            self._packagesystemPath,
            referentPath,
            )

    ### PUBLIC PROPERTIES ###

    @property
    def referentPackagesystemPath(self):
        path = '.'.join((
            self.definingClass.__module__,
            self.definingClass.__name__,
            self.memberName,
            ))
        return path.replace('.__init__', '')

    def rstAutodocDirectiveFormat(self):
        pass

    def sphinxCrossReferenceRole(self):
        pass






class MethodDocumenter(MemberDocumenter):
    '''
    A documenter for class methods:

    >>> method = key.KeySignature.transpose
    >>> documenter = documentation.documenters.MethodDocumenter(
    ...     method, 'transpose', key.KeySignature)
    >>> documenter
    <music21.documentation.documenters.MethodDocumenter: music21.key.KeySignature.transpose>

    >>> documenter.rstCrossReferenceString
    ':meth:`~music21.key.KeySignature.transpose`'

    >>> for line in documenter.rstAutodocDirectiveFormat:
    ...     line
    '.. automethod:: music21.key.KeySignature.transpose'
    ''

    '''

    ### PUBLIC PROPERTIES ###

    @property
    def rstAutodocDirectiveFormat(self):
        result = []
        result.append('.. automethod:: {0}'.format(
            self.referentPackagesystemPath,
            ))
        result.append('')
        return result

    @property
    def sphinxCrossReferenceRole(self):
        return 'meth'


class AttributeDocumenter(MemberDocumenter):
    '''
    A documenter for class attributes, both read/write and read-only:

    >>> attribute = key.KeySignature.sharps
    >>> documenter = documentation.documenters.AttributeDocumenter(
    ...     attribute, 'sharps', key.KeySignature)
    >>> documenter
    <music21.documentation.documenters.AttributeDocumenter: music21.key.KeySignature.sharps>

    >>> documenter.rstCrossReferenceString
    ':attr:`~music21.key.KeySignature.sharps`'

    >>> for line in documenter.rstAutodocDirectiveFormat:
    ...     line
    '.. autoattribute:: music21.key.KeySignature.sharps'
    ''
    '''

    ### PUBLIC PROPERTIES ###

    @property
    def rstAutodocDirectiveFormat(self):
        result = []
        result.append('.. autoattribute:: {0}'.format(
            self.referentPackagesystemPath,
            ))
        result.append('')
        return result

    @property
    def sphinxCrossReferenceRole(self):
        return 'attr'


class ClassDocumenter(ObjectDocumenter):
    '''
    A documenter for one class:

    >>> klass = articulations.Caesura
    >>> documenter = documentation.documenters.ClassDocumenter(klass)
    >>> documenter
    <music21.documentation.documenters.ClassDocumenter: music21.articulations.Caesura>
    >>> documenter.referent
    <class 'music21.articulations.Caesura'>

    >>> documenter.rstCrossReferenceString
    ':class:`~music21.articulations.Caesura`'


    >>> for line in documenter.rstAutodocDirectiveFormat:
    ...     line
    ...
    '.. autoclass:: music21.articulations.Caesura'
    ''

    Generate the ReST lines by calling `run` on the documenter:

    >>> rstList = documenter.run()
    >>> for l in rstList:
    ...     if len(l) != 0:
    ...         print(l)
    Caesura
    -------
    .. autoclass:: music21.articulations.Caesura
    .. rubric:: :class:`~music21.articulations.Caesura` bases
    - :class:`~music21.articulations.Articulation`
    - :class:`~music21.base.Music21Object`
    .. rubric:: :class:`~music21.articulations.Caesura` read-only properties
    Read-only properties inherited from :class:`~music21.articulations.Articulation`:
    .. hlist::
       :columns: 3
       - :attr:`~music21.articulations.Articulation.name`
    Read-only properties inherited from :class:`~music21.base.Music21Object`:
    .. hlist::
       :columns: 3
       - :attr:`~music21.base.Music21Object.beat`
       - :attr:`~music21.base.Music21Object.beatDuration`
                ...
       - :attr:`~music21.base.Music21Object.measureNumber`
    .. rubric:: :class:`~music21.articulations.Caesura` read/write properties
    Read/write properties inherited from :class:`~music21.articulations.Articulation`:
    .. hlist::
       :columns: 3
       - :attr:`~music21.articulations.Articulation.volumeShift`
    Read/write properties inherited from :class:`~music21.base.Music21Object`:
    .. hlist::
       :columns: 3
       - :attr:`~music21.base.Music21Object.activeSite`
       - :attr:`~music21.base.Music21Object.derivation`
                ...
       - :attr:`~music21.base.Music21Object.style`
    .. rubric:: :class:`~music21.articulations.Caesura` methods
    Methods inherited from :class:`~music21.base.Music21Object`:
    .. hlist::
       :columns: 3
       - :meth:`~music21.base.Music21Object.containerHierarchy`
       - :meth:`~music21.base.Music21Object.contextSites`
       - :meth:`~music21.base.Music21Object.getAllContextsByClass`
                ...
       - :meth:`~music21.base.Music21Object.splitAtQuarterLength`
       - :meth:`~music21.base.Music21Object.splitByQuarterLengths`
       - :meth:`~music21.base.Music21Object.write`
    .. rubric:: :class:`~music21.articulations.Caesura` instance variables
    Instance variables inherited from :class:`~music21.base.Music21Object`:
    .. hlist::
       :columns: 3
       - :attr:`~music21.base.Music21Object.classSortOrder`
       - :attr:`~music21.base.Music21Object.groups`
       - :attr:`~music21.base.Music21Object.hideObjectOnPrint`
       - :attr:`~music21.base.Music21Object.id`
       - :attr:`~music21.base.Music21Object.isStream`
    '''

    ### CLASS VARIABLES ###

    _identityMap = {}

    ### INITIALIZER ###

    def __init__(self, referent=None):
        if not (isinstance(referent, six.class_types), repr(referent)):
            raise Music21Exception("Need to pass in a class an instantiation time")
        ObjectDocumenter.__init__(self, referent)


        self._baseClasses = None
        self._baseClassDocumenters = None        
        self._docAttr = None
        self._docOrder = None 
        self._inheritedDocAttrMapping = None
        
        self._methods = []
        self._inheritedMethodsMapping = {}

        # Read/Write
        self._readwriteProperties = []
        self._inheritedReadwritePropertiesMapping = {}

        # Read-only
        self._readonlyProperties = []
        self._inheritedReadonlyPropertiesMapping = {}
        
        self.findAttributes()

        if self.referent not in self._identityMap:
            self._identityMap[self.referent] = self


    def findAttributes(self):
        '''
        find all attributes in self.referent and set classes appropriately.
        '''
        
        attrs = inspect.classify_class_attrs(self.referent)
        for attr in attrs:
            self.findOneAttribute(attr)

        self.sortMemberLists()
        
    def sortMemberLists(self):
        '''
        sort all the member lists by their member names.
        '''
        keyLambda = lambda x: x.memberName
        self._methods.sort(key=keyLambda)
        self._readonlyProperties.sort(key=keyLambda)
        self._readwriteProperties.sort(key=keyLambda)
        for documenters in self._inheritedMethodsMapping.values():
            documenters.sort(key=keyLambda)
        for documenters in self._inheritedReadonlyPropertiesMapping.values():
            documenters.sort(key=keyLambda)
        for documenters in self._inheritedReadwritePropertiesMapping.values():
            documenters.sort(key=keyLambda)


    def findOneAttribute(self, attr):
        # Ignore definitions derived directly from object
        if attr.defining_class is object:
            return
        # Ignore private members ('_') and special members ('__')
        elif attr.name.startswith('_'):
            return

        definingClass = attr.defining_class
        if attr.kind in ('class method', 'method', 'static method'):
            documenterClass = MethodDocumenter
            localMemberList = self._methods
            inheritedMembersMapping = self._inheritedMethodsMapping
        elif attr.kind in ('property',) and attr.object.fset is not None:
            documenterClass = AttributeDocumenter
            localMemberList = self._readwriteProperties
            inheritedMembersMapping = self._inheritedReadwritePropertiesMapping
        elif attr.kind in ('property',) and attr.object.fset is None:
            documenterClass = AttributeDocumenter
            localMemberList = self._readonlyProperties
            inheritedMembersMapping = self._inheritedReadonlyPropertiesMapping
        else: # do not support writeonlyProperties
            return

        documenter = documenterClass(
            attr.object,
            attr.name,
            definingClass,
            )
        if definingClass is self.referent:
            localMemberList.append(documenter)
        else:
            definingClassDocumenter = type(self).fromIdentityMap(
                definingClass)
            if definingClassDocumenter not in inheritedMembersMapping:
                inheritedMembersMapping[definingClassDocumenter] = []
            inheritedMembersMapping[definingClassDocumenter].append(documenter)

    ### SPECIAL METHODS ###

    def run(self):
        result = []
        result.extend(self.makeHeading(self.referent.__name__, 2))
        result.extend(self.rstAutodocDirectiveFormat)
        result.extend(self.rstBasesFormat)
        result.extend(self.rstReadonlyPropertiesFormat)
        result.extend(self.rstReadwritePropertiesFormat)
        result.extend(self.rstMethodsFormat)
        result.extend(self.rstDocAttrFormat)
        return result

    def __hash__(self):
        return hash((type(self), self.referent))

    def __repr__(self):
        referentPath = '.'.join((
            self.referent.__module__,
            self.referent.__name__,
            ))
        return '<{0}: {1}>'.format(
            self._packagesystemPath,
            referentPath,
            )

    ### PRIVATE METHODS ###

    def _formatInheritedMembersMapping(self, mapping, banner):
        result = []
        if not mapping:
            return result
        for classDocumenter in self.baseClassDocumenters:
            if classDocumenter not in mapping:
                continue
            result.append(banner.format(
                classDocumenter.rstCrossReferenceString))
            result.append('')
            memberDocumenters = mapping[classDocumenter]
            result.append('.. hlist::')
            result.append('   :columns: 3')
            result.append('')
            for memberDocumenter in memberDocumenters:
                result.append('   - {0}'.format(
                    memberDocumenter.rstCrossReferenceString))
            result.append('')
        return result

    ### PUBLIC METHODS ###

    @classmethod
    def fromIdentityMap(cls, referent):
        if referent in cls._identityMap:
            return cls._identityMap[referent]
        return cls(referent)

    ### PUBLIC PROPERTIES ###

    @property
    def baseClasses(self):
        '''
        >>> d = documentation.documenters.ClassDocumenter(articulations.Caesura)
        >>> d.baseClasses
        (<class 'music21.articulations.Articulation'>, 
         <class 'music21.base.Music21Object'>)
        '''
        if self._baseClasses is None:
            self._baseClasses = tuple(
                cls for cls in inspect.getmro(self.referent)[1:]
                if cls.__module__.startswith('music21'))
            
        return self._baseClasses

    @property
    def baseClassDocumenters(self):
        if self._baseClassDocumenters is None:
            self._baseClassDocumenters = tuple(
            type(self).fromIdentityMap(cls) for cls in self.baseClasses)

        return self._baseClassDocumenters

    @property
    def docAttr(self):
        '''
        The music21 _DOC_ATTR definition for a documented class:

        >>> klass = stream.Stream
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for key in sorted(list(documenter.docAttr.keys())):
        ...     key
        ...
        'autoSort'
        'definesExplicitPageBreaks'
        'definesExplicitSystemBreaks'
        'isFlat'
        'isSorted'
        'recursionType'
        '''
        if self._docAttr is None:
            attrs = inspect.classify_class_attrs(self.referent)
            docAttrAttr = [attr for attr in attrs if attr.name == '_DOC_ATTR']
            if docAttrAttr:
                docAttrAttr = docAttrAttr[0]
                if docAttrAttr.defining_class is self.referent:
                    self._docAttr = self.referent._DOC_ATTR

        return self._docAttr

    @property
    def docOrder(self):
        '''
        The music21 _DOC_ORDER definition for a documented class:

        >>> klass = dynamics.Dynamic
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for name in documenter.docOrder:
        ...     name
        'longName'
        'englishName'
        '''
        self._docOrder = getattr(self.referent, '_DOC_ORDER', [])
        return self._docOrder


    @property
    def inheritedDocAttrMapping(self):
        '''
        A mapping of parent class documenters and doc-attr attribute dicts
        for a documented class:

        >>> klass = stream.Measure
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> mapping = documenter.inheritedDocAttrMapping
        >>> sortBy = lambda x: x.referentPackagesystemPath
        >>> for classDocumenter in sorted(mapping, key=sortBy):
        ...     classDocumenter
        ...
        <music21.documentation.documenters.ClassDocumenter: music21.base.Music21Object>
        <music21.documentation.documenters.ClassDocumenter: music21.stream.Stream>

        '''
        # if one of the _DOC_ATTRs is exactly the same as the previous base class,
        # only show it once.
        # TODO: do this on an attribute by attribute basis...
        seenBaseClassDocAttrs = []

        if self._inheritedDocAttrMapping is None:
            inheritedDocAttr = {}
            for baseClass in reversed(self.baseClasses):
                baseClassDocAttr = getattr(baseClass, '_DOC_ATTR', None)
                if (baseClassDocAttr is not None 
                        and baseClassDocAttr not in seenBaseClassDocAttrs):
                    baseClassDocumenter = type(self).fromIdentityMap(baseClass)
                    inheritedDocAttr[baseClassDocumenter] = baseClassDocAttr
                    seenBaseClassDocAttrs.append(baseClassDocAttr)
            self._inheritedDocAttrMapping = inheritedDocAttr

        return self._inheritedDocAttrMapping

    @property
    def inheritedReadonlyPropertiesMapping(self):
        '''
        A mapping of parent class documenters and inherited read-only
        properties for a documented class:

        >>> klass = stream.Measure
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> mapping = documenter.inheritedReadonlyPropertiesMapping
        >>> sortBy = lambda x: x.referentPackagesystemPath
        >>> for classDocumenter in sorted(mapping, key=sortBy):
        ...     print('{0}:'.format(
        ...         classDocumenter.referentPackagesystemPath))
        ...     for attributeDocumenter in mapping[classDocumenter][:10]:
        ...         print('- {0}'.format(
        ...             attributeDocumenter.referentPackagesystemPath))
        ...
        music21.base.Music21Object:
        - music21.base.Music21Object.classSet
        - music21.base.Music21Object.classes
        - music21.base.Music21Object.hasEditorialInformation
        - music21.base.Music21Object.hasStyleInformation
        - music21.base.Music21Object.measureNumber
        music21.stream.Stream:
        - music21.stream.Stream.beat
        - music21.stream.Stream.beatDuration
        - music21.stream.Stream.beatStr
        - music21.stream.Stream.beatStrength
        - music21.stream.Stream.flat
        - music21.stream.Stream.highestOffset
        - music21.stream.Stream.highestTime
        - music21.stream.Stream.isGapless
        - music21.stream.Stream.iter
        - music21.stream.Stream.lowestOffset
        music21.stream.core.StreamCoreMixin:
        - music21.stream.core.StreamCoreMixin.spannerBundle
        '''
        return self._inheritedReadonlyPropertiesMapping

    @property
    def inheritedMethodsMapping(self):
        '''
        A mapping of parent class documenters and inherited attributes for a
        documented class:

        >>> klass = stream.Measure
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> mapping = documenter.inheritedMethodsMapping
        >>> sortBy = lambda x: x.referentPackagesystemPath
        >>> for classDocumenter in sorted(mapping, key=sortBy):
        ...     print('{0}:'.format(
        ...         classDocumenter.referentPackagesystemPath))
        ...     for attributeDocumenter in mapping[classDocumenter][:10]:
        ...         print('- {0}'.format(
        ...             attributeDocumenter.referentPackagesystemPath))
        ...
        music21.base.Music21Object:
        - music21.base.Music21Object.containerHierarchy
        - music21.base.Music21Object.contextSites      
        - music21.base.Music21Object.getAllContextsByClass
        - music21.base.Music21Object.getContextByClass
        - music21.base.Music21Object.getOffsetBySite
        - music21.base.Music21Object.getOffsetInHierarchy
        - music21.base.Music21Object.getSpannerSites
        - music21.base.Music21Object.informSites
        - music21.base.Music21Object.isClassOrSubclass
        - music21.base.Music21Object.next
        music21.stream.Stream:
        - music21.stream.Stream.activateVariants
        - music21.stream.Stream.addGroupForElements
        - music21.stream.Stream.allPlayingWhileSounding
        - music21.stream.Stream.analyze
        - music21.stream.Stream.append
        - music21.stream.Stream.attachIntervalsBetweenStreams
        - music21.stream.Stream.attachMelodicIntervals
        - music21.stream.Stream.attributeCount
        - music21.stream.Stream.augmentOrDiminish
        - music21.stream.Stream.beatAndMeasureFromOffset
        music21.stream.core.StreamCoreMixin:
        - music21.stream.core.StreamCoreMixin.asTimespans
        - music21.stream.core.StreamCoreMixin.asTree
        - music21.stream.core.StreamCoreMixin.coreGatherMissingSpanners
        - music21.stream.core.StreamCoreMixin.elementsChanged        
        '''
        return self._inheritedMethodsMapping

    @property
    def inheritedReadwritePropertiesMapping(self):
        '''
        A mapping of parent class documenters and inherited read/write
        properties for a documented class:

        >>> klass = stream.Measure
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> mapping = documenter.inheritedReadwritePropertiesMapping
        >>> sortBy = lambda x: x.referentPackagesystemPath
        >>> for classDocumenter in sorted(mapping, key=sortBy):
        ...     print('{0}:'.format(classDocumenter.referentPackagesystemPath))
        ...     for attributeDocumenter in mapping[classDocumenter][:10]:
        ...         print('- {0}'.format(attributeDocumenter.referentPackagesystemPath))
        ...
        music21.base.Music21Object:
        - music21.base.Music21Object.activeSite
        - music21.base.Music21Object.derivation
        - music21.base.Music21Object.editorial
        - music21.base.Music21Object.offset
        - music21.base.Music21Object.priority
        - music21.base.Music21Object.quarterLength
        - music21.base.Music21Object.style
        music21.stream.Stream:
        - music21.stream.Stream.atSoundingPitch
        - music21.stream.Stream.clef
        - music21.stream.Stream.duration
        - music21.stream.Stream.elements
        - music21.stream.Stream.finalBarline
        - music21.stream.Stream.keySignature
        - music21.stream.Stream.metadata
        - music21.stream.Stream.seconds
        - music21.stream.Stream.timeSignature

        '''
        return self._inheritedReadwritePropertiesMapping

    @property
    def methods(self):
        '''
        The method documenters for a documented class:

        >>> klass = stream.Stream
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for method in documenter.methods[:10]:
        ...     method
        ...
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.activateVariants>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.addGroupForElements>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.allPlayingWhileSounding>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.analyze>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.append>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.attachIntervalsBetweenStreams>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.attachMelodicIntervals>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.attributeCount>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.augmentOrDiminish>
        <music21.documentation.documenters.MethodDocumenter: 
            music21.stream.Stream.beatAndMeasureFromOffset>
        '''
        return self._methods

    @property
    def readonlyProperties(self):
        '''
        The read-only property documenters for a documented class:

        >>> klass = stream.Stream
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for attr in documenter.readonlyProperties:
        ...     attr
        ...
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.beat>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.beatDuration>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.beatStr>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.beatStrength>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.flat>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.highestOffset>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.highestTime>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.isGapless>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.iter>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.lowestOffset>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.notes>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.notesAndRests>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.pitches>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.secondsMap>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.semiFlat>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.sorted>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.spanners>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.variants>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.voices>

        '''
        return self._readonlyProperties

    @property
    def readwriteProperties(self):
        '''
        The read/write property documenters for a documented class:

        >>> klass = stream.Stream
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for prop in documenter.readwriteProperties:
        ...     prop
        ...
        <music21.documentation.documenters.AttributeDocumenter: 
            music21.stream.Stream.atSoundingPitch>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.clef>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.duration>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.elements>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.finalBarline>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.keySignature>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.metadata>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.seconds>
        <music21.documentation.documenters.AttributeDocumenter: music21.stream.Stream.timeSignature>

        '''
        return self._readwriteProperties

    @property
    def referentPackagesystemPath(self):
        path = '.'.join((
            self.referent.__module__,
            self.referent.__name__,
            ))
        return path.replace('.__init__', '')

    @property
    def rstAutodocDirectiveFormat(self):
        result = []
        referentPackagesystemPath = self.referentPackagesystemPath.replace(
            '.__init__', '')
        result.append('.. autoclass:: {0}'.format(
            referentPackagesystemPath,
            ))
        result.append('')
        return result

    @property
    def rstBasesFormat(self):
        '''
        The ReST format for the bases from which the documented class
        inherits:

        >>> klass = documentation.documenters.ClassDocumenter
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstBasesFormat:
        ...     line
        ...
        '.. rubric:: :class:`~music21.documentation.documenters.ClassDocumenter` bases'
        ''
        '- :class:`~music21.documentation.documenters.ObjectDocumenter`'
        '- :class:`~music21.documentation.documenters.Documenter`'
        ''

        '''
        result = []
        if self.baseClasses:
            banner = '{0} bases'.format(self.rstCrossReferenceString)
            result.extend(self.makeRubric(banner))
            #result.extend(self.makeHeading(banner, 3))
            for class_documenter in self.baseClassDocumenters:
                result.append('- {0}'.format(
                    class_documenter.rstCrossReferenceString))
            result.append('')
        return result

    @property
    def rstDocAttrFormat(self):
        result = []
        if self.docAttr:
            for attrName, attrDescription in sorted(self.docAttr.items()):
                path = '{0}.{1}'.format(
                    self.referentPackagesystemPath.split('.')[-1],
                    attrName,
                    )
                directive = '.. attribute:: {0}'.format(path)
                result.extend((directive, ''))
                for line in attrDescription.split('\n'):
                    result.append('\t{0}'.format(line.strip()))
                result.append('')
        result.extend(self.rstInheritedDocAttrFormat)
        if result:
            banner = '{0} instance variables'.format(
                self.rstCrossReferenceString)
            result = self.makeRubric(banner) + result
            #result = self.makeHeading(banner, 3) + result
        return result

    @property
    def rstInheritedDocAttrFormat(self):
        result = []
        for baseDocumenter in self.baseClassDocumenters:
            if baseDocumenter in self.inheritedDocAttrMapping:
                attrNames = sorted(list(self.inheritedDocAttrMapping[baseDocumenter].keys()))
                if not attrNames:
                    continue
                banner = 'Instance variables inherited from {0}:'.format(
                    baseDocumenter.rstCrossReferenceString)
                result.extend((banner, ''))
                result.append('.. hlist::')
                result.append('   :columns: 3')
                result.append('')
                formatString = '   - :attr:`~{0}.{1}`'
                for attrName in attrNames:
                    result.append(formatString.format(
                        baseDocumenter.referentPackagesystemPath,
                        attrName,
                        ))
                result.append('')
        return result

    @property
    def rstInheritedMethodsFormat(self):
        r'''
        The ReST format for inherited methods:

        >>> klass = documentation.documenters.MethodDocumenter
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstInheritedMethodsFormat:
        ...     line
        ...
        'Methods inherited from :class:`~music21.documentation.documenters.MemberDocumenter`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :meth:`~music21.documentation.documenters.MemberDocumenter.run`'
        ''
        'Methods inherited from :class:`~music21.documentation.documenters.Documenter`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :meth:`~music21.documentation.documenters.Documenter.makeHeading`'
        '   - :meth:`~music21.documentation.documenters.Documenter.makeRubric`'
        ''

        '''
        mapping = self.inheritedMethodsMapping
        banner = 'Methods inherited from {0}:'
        return self._formatInheritedMembersMapping(mapping, banner)


    @property
    def rstInheritedReadonlyPropertiesFormat(self):
        r'''
        The ReST format for inherited methods:

        >>> klass = note.Note
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstInheritedReadonlyPropertiesFormat:
        ...     line
        'Read-only properties inherited from :class:`~music21.base.Music21Object`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :attr:`~music21.base.Music21Object.beat`'
        '   - :attr:`~music21.base.Music21Object.beatDuration`'
        '   - :attr:`~music21.base.Music21Object.beatStr`'
        '   - :attr:`~music21.base.Music21Object.beatStrength`'
        '   - :attr:`~music21.base.Music21Object.classSet`'
        '   - :attr:`~music21.base.Music21Object.classes`'
        '   - :attr:`~music21.base.Music21Object.hasEditorialInformation`'
        '   - :attr:`~music21.base.Music21Object.hasStyleInformation`'
        '   - :attr:`~music21.base.Music21Object.measureNumber`'
        ''

        '''
        mapping = self.inheritedReadonlyPropertiesMapping
        banner = 'Read-only properties inherited from {0}:'
        return self._formatInheritedMembersMapping(mapping, banner)

    @property
    def rstInheritedReadwritePropertiesFormat(self):
        '''
        The ReST format for inherited methods:

        >>> klass = note.Unpitched
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstInheritedReadwritePropertiesFormat:
        ...     line
        'Read/write properties inherited from :class:`~music21.note.NotRest`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :attr:`~music21.note.NotRest.notehead`'
        '   - :attr:`~music21.note.NotRest.noteheadFill`'
        '   - :attr:`~music21.note.NotRest.noteheadParenthesis`'
        '   - :attr:`~music21.note.NotRest.stemDirection`'
        '   - :attr:`~music21.note.NotRest.volume`'
        ''
        'Read/write properties inherited from :class:`~music21.note.GeneralNote`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :attr:`~music21.note.GeneralNote.color`'
        '   - :attr:`~music21.note.GeneralNote.lyric`'
        ''
        'Read/write properties inherited from :class:`~music21.base.Music21Object`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :attr:`~music21.base.Music21Object.activeSite`'
        '   - :attr:`~music21.base.Music21Object.derivation`'
        '   - :attr:`~music21.base.Music21Object.duration`'
        '   - :attr:`~music21.base.Music21Object.editorial`'
        '   - :attr:`~music21.base.Music21Object.offset`'
        '   - :attr:`~music21.base.Music21Object.priority`'
        '   - :attr:`~music21.base.Music21Object.quarterLength`'
        '   - :attr:`~music21.base.Music21Object.seconds`'
        '   - :attr:`~music21.base.Music21Object.style`'
        ''
        '''
        mapping = self.inheritedReadwritePropertiesMapping
        banner = 'Read/write properties inherited from {0}:'
        return self._formatInheritedMembersMapping(mapping, banner)

    @property
    def rstMethodsFormat(self):
        r'''
        The ReST format for the documented class's methods:

        >>> klass = scale.MajorScale
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstMethodsFormat:
        ...     line
        '.. rubric:: :class:`~music21.scale.MajorScale` methods'
        ''
        'Methods inherited from :class:`~music21.scale.DiatonicScale`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :meth:`~music21.scale.DiatonicScale.getDominant`'
        ...
        '   - :meth:`~music21.scale.DiatonicScale.getTonic`'
        ''
        'Methods inherited from :class:`~music21.scale.ConcreteScale`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :meth:`~music21.scale.ConcreteScale.derive`'
        '   - :meth:`~music21.scale.ConcreteScale.deriveAll`'
        ...
        '   - :meth:`~music21.scale.ConcreteScale.write`'
        ''
        'Methods inherited from :class:`~music21.scale.Scale`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :meth:`~music21.scale.Scale.extractPitchList`'
        ''
        'Methods inherited from :class:`~music21.base.Music21Object`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :meth:`~music21.base.Music21Object.containerHierarchy`'
        ...
        '   - :meth:`~music21.base.Music21Object.splitByQuarterLengths`'
        ''

        '''
        result = []
        if self.methods:
            for documenter in self.methods:
                result.extend(documenter.run())
            if result[-1] != '':
                result.append('')
        result.extend(self.rstInheritedMethodsFormat)
        if result:
            banner = '{0} methods'.format(self.rstCrossReferenceString)
            #result = self.makeHeading(banner, 3) + result
            result = self.makeRubric(banner) + result
        return result

    @property
    def rstReadonlyPropertiesFormat(self):
        r'''
        The ReST format for the documented class's read-only properties:

        >>> klass = note.Note
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstReadonlyPropertiesFormat:
        ...     line
        '.. rubric:: :class:`~music21.note.Note` read-only properties'
        ''
        '.. autoattribute:: music21.note.Note.diatonicNoteNum'
        ''
        '.. autoattribute:: music21.note.Note.fullName'
        ''
        'Read-only properties inherited from :class:`~music21.base.Music21Object`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :attr:`~music21.base.Music21Object.beat`'
        '   - :attr:`~music21.base.Music21Object.beatDuration`'
        '   - :attr:`~music21.base.Music21Object.beatStr`'
        '   - :attr:`~music21.base.Music21Object.beatStrength`'
        '   - :attr:`~music21.base.Music21Object.classSet`'
        '   - :attr:`~music21.base.Music21Object.classes`'
        '   - :attr:`~music21.base.Music21Object.hasEditorialInformation`'
        '   - :attr:`~music21.base.Music21Object.hasStyleInformation`'
        '   - :attr:`~music21.base.Music21Object.measureNumber`'
        ''

        '''
        result = []
        if self.readonlyProperties:
            for documenter in self.readonlyProperties:
                result.extend(documenter.run())
            if result[-1] != '':
                result.append('')
        result.extend(self.rstInheritedReadonlyPropertiesFormat)
        if result:
            banner = '{0} read-only properties'.format(
                self.rstCrossReferenceString)
            result = self.makeRubric(banner) + result
        return result

    @property
    def rstReadwritePropertiesFormat(self):
        '''
        The ReST format for the documented class's read-only properties:

        >>> klass = scale.MajorScale
        >>> documenter = documentation.documenters.ClassDocumenter(klass)
        >>> for line in documenter.rstReadwritePropertiesFormat:
        ...     line
        '.. rubric:: :class:`~music21.scale.MajorScale` read/write properties'
        ''
        'Read/write properties inherited from :class:`~music21.base.Music21Object`:'
        ''
        '.. hlist::'
        '   :columns: 3'
        ''
        '   - :attr:`~music21.base.Music21Object.activeSite`'
        '   - :attr:`~music21.base.Music21Object.derivation`'
        '   - :attr:`~music21.base.Music21Object.duration`'
        '   - :attr:`~music21.base.Music21Object.editorial`'
        '   - :attr:`~music21.base.Music21Object.offset`'
        '   - :attr:`~music21.base.Music21Object.priority`'
        '   - :attr:`~music21.base.Music21Object.quarterLength`'
        '   - :attr:`~music21.base.Music21Object.seconds`'
        '   - :attr:`~music21.base.Music21Object.style`'
        ''
        '''
        result = []
        if self.readwriteProperties:
            for documenter in self.readwriteProperties:
                result.extend(documenter.run())
            if result[-1] != '':
                result.append('')
        result.extend(self.rstInheritedReadwritePropertiesFormat)
        if result:
            banner = '{0} read/write properties'.format(
                self.rstCrossReferenceString)
            result = self.makeRubric(banner) + result
        return result

    @property
    def sphinxCrossReferenceRole(self):
        return 'class'


class ModuleDocumenter(ObjectDocumenter):
    '''
    A documenter for one module:

    >>> documenter = documentation.documenters.ModuleDocumenter(serial)
    >>> documenter
    <music21.documentation.documenters.ModuleDocumenter: music21.serial>

    >>> for reference, referent in sorted(list(
    ...     documenter.namesMapping.items())):
    ...     print("%s %s" % (reference, referent))
    ...
    HistoricalTwelveToneRow <...ClassDocumenter: music21.serial.HistoricalTwelveToneRow>
    ToneRow <...ClassDocumenter: music21.serial.ToneRow>
    TwelveToneMatrix <...ClassDocumenter: music21.serial.TwelveToneMatrix>
    TwelveToneRow <...ClassDocumenter: music21.serial.TwelveToneRow>
    getHistoricalRowByName <...FunctionDocumenter: music21.serial.getHistoricalRowByName>
    pcToToneRow <...FunctionDocumenter: music21.serial.pcToToneRow>
    rowToMatrix <...FunctionDocumenter: music21.serial.rowToMatrix>

    >>> documenter.rstCrossReferenceString
    ':mod:`~music21.serial`'

    >>> for line in documenter.rstAutodocDirectiveFormat:
    ...     line
    ...
    '.. automodule:: music21.serial'
    ''

    Call the documenter to generate the ReStructuredText format:

    >>> restructuredText = documenter.run()

    '''

    ### CLASS VARIABLES ###

    _ignored_classes = frozenset((
        BaseException,
        unittest.TestCase,
        ))

    ### INITIALIZER ###

    def __init__(self, referent):
        if not isinstance(referent, types.ModuleType):
            raise Music21Exception("referent must be a module")
        ObjectDocumenter.__init__(self, referent)
        namesMapping = self._examineModule()
        self._namesMapping = namesMapping
        docOrder = self.referent.__dict__.get('_DOC_ORDER')
        if docOrder is not None and not common.isListLike(docOrder):
            print("Doc order for ", self.referent, " has problems")
        self._memberOrder = tuple(docOrder or ())

    ### SPECIAL METHODS ###

    def run(self):
        result = []
        result.extend(self.rstPageReferenceFormat)
        referentPackagesystemPath = self.referentPackagesystemPath.replace(
            '.__init__', '')
        result.extend(self.makeHeading(referentPackagesystemPath, 1))
        result.extend(self.rstEditingWarningFormat)
        result.extend(self.rstAutodocDirectiveFormat)
        if self.functionDocumenters:
            result.extend(self.makeHeading('Functions', 2))
            for functionDocumenter in self.functionDocumenters:
                result.extend(functionDocumenter.run())
        for classDocumenter in self.classDocumenters:
            result.extend(classDocumenter.run())
        return result

    def __repr__(self):
        return '<{0}: {1}>'.format(
            self._packagesystemPath,
            self.referentPackagesystemPath,
            )

    ### PRIVATE METHODS ###

    def _examineModule(self):
        namesMapping = {}
        for name in dir(self.referent):
            if name.startswith('_'):
                continue
            named = getattr(self.referent, name)
            if isinstance(named, six.class_types):
                if set(inspect.getmro(named)).intersection(
                    self._ignored_classes):
                    continue
                if named.__module__ != self.referent.__name__:
                    continue
                namesMapping[name] = ClassDocumenter(named)
            elif (isinstance(named, types.FunctionType)
                    and not named.__name__ == '<lambda>'):
                if named.__module__ != self.referent.__name__:
                    continue
                namesMapping[name] = FunctionDocumenter(named)
        return namesMapping

    ### PUBLIC PROPERTIES ###

    @property
    def classDocumenters(self):
        '''
        Return a list of class documenters for classes housed in the
        module documenter's module object, taking into account any ordering
        via the `_DOC_ORDER` module-level variable:

        >>> module = serial
        >>> documenter = documentation.documenters.ModuleDocumenter(module)
        >>> for classDocumenter in documenter.classDocumenters:
        ...     print(classDocumenter.referentPackagesystemPath)
        ...
        music21.serial.HistoricalTwelveToneRow
        music21.serial.ToneRow
        music21.serial.TwelveToneMatrix
        music21.serial.TwelveToneRow

        '''
        result = []
        classDocumenters = {}
        for documenter in self.namesMapping.values():
            if isinstance(documenter, ClassDocumenter):
                classDocumenters[documenter.referent] = documenter
        for referent in self.memberOrder:
            if referent in classDocumenters:
                result.append(classDocumenters[referent])
                del(classDocumenters[referent])
        for documenter in sorted(classDocumenters.values(),
            key=lambda x: x.referentPackagesystemPath):
            result.append(documenter)
        return result

    @property
    def functionDocumenters(self):
        '''
        Return a list of class documenters for classes housed in the
        module documenter's module object, taking into account any ordering
        via the `_DOC_ORDER` module-level variable:

        >>> module = serial
        >>> documenter = documentation.documenters.ModuleDocumenter(module)
        >>> for functionDocumenter in documenter.functionDocumenters:
        ...     print(functionDocumenter.referentPackagesystemPath)
        ...
        music21.serial.getHistoricalRowByName
        music21.serial.pcToToneRow
        music21.serial.rowToMatrix

        '''
        result = []
        functionDocumenters = {}
        for documenter in self.namesMapping.values():
            if isinstance(documenter, FunctionDocumenter):
                functionDocumenters[documenter.referent] = documenter
        for referent in self.memberOrder:
            if referent in functionDocumenters:
                result.append(functionDocumenters[referent])
                del(functionDocumenters[referent])
        for documenter in sorted(functionDocumenters.values(),
            key=lambda x: x.referentPackagesystemPath):
            result.append(documenter)
        return result

    @property
    def namesMapping(self):
        return self._namesMapping

    @property
    def memberOrder(self):
        return self._memberOrder

    @property
    def referentPackagesystemPath(self):
        if isinstance(self.referent.__name__, tuple):
            path = self.referent.__name__[0],
        else:
            path = self.referent.__name__
        return path.replace('.__init__', '')

    @property
    def rstAutodocDirectiveFormat(self):
        result = []
        result.append('.. automodule:: {0}'.format(
            self.referentPackagesystemPath,
            ))
        result.append('')
        return result

    @property
    def rstPageReferenceFormat(self):
        result = []
        result.append('.. _{0}:'.format(self.referenceName))
        result.append('')
        return result

    @property
    def referenceName(self):
        '''The short name of the module:

        >>> module = serial
        >>> documenter = documentation.documenters.ModuleDocumenter(module)
        >>> documenter.referenceName
        'moduleSerial'

        >>> from music21.stream import makeNotation
        >>> module = makeNotation
        >>> documenter = documentation.documenters.ModuleDocumenter(module)
        >>> documenter.referenceName
        'moduleStreamMakeNotation'

        '''
        referentPackagesystemPath = self.referentPackagesystemPath.replace(
            '.__init__', '')
        parts = referentPackagesystemPath.split('.')[1:]
        for i, part in enumerate(parts):
            if not part[0].isupper():
                parts[i] = part[0].upper() + part[1:]
        parts = ['module'] + parts
        return ''.join(parts)

    @property
    def sphinxCrossReferenceRole(self):
        return 'mod'


class CorpusDocumenter(Documenter):
    '''A documenter for music21's corpus:

    >>> documenter = documentation.documenters.CorpusDocumenter()
    >>> restructuredText = documenter.run()

    '''

    ### SPECIAL METHODS ###

    def run(self):
        from music21 import corpus
        result = []
        result.extend(self.rstPageReferenceFormat)
        result.extend(self.makeHeading(self.headingText, 1))
        result.extend(self.rstEditingWarningFormat)
        result.extend(self.rstCorpusIntroductionFormat)
        # TODO: use... common.getCorpusContentDirs to make sure nothing is missed.
        for directoryInformation in corpus.corpora.CoreCorpus().getWorkReferences():
            result.extend(self.getRstComposerDictFormat(directoryInformation))
        return result

    def __repr__(self):
        return '<{0}>'.format(self._packagesystemPath)

    ### PUBLIC PROPERTIES ###

    @property
    def headingText(self):
        return 'List of Works Found in the music21 Corpus'

    @property
    def rstCorpusIntroductionFormat(self):
        result = []
        result.append('The following list shows all files available in the ')
        result.append('music21 corpus and available through the virtual corpus.')
        result.append('To load a work from the corpus, provide the file path ')
        result.append('stub provided.')
        result.append('')
        result.append('For example:')
        result.append('')
        result.append('::')
        result.append('')
        result.append('   >>> from music21 import corpus')
        result.append("   >>> s = corpus.parse('bach/bwv108.6.xml')")
        result.append('')
        return result

    @property
    def rstPageReferenceFormat(self):
        result = []
        result.append('.. _referenceCorpus:')
        result.append('')
        return result

    ### PUBLIC METHODS ###

    def getRstComposerDictFormat(self, directoryInformation):
        result = []
        result.extend(self.makeHeading(directoryInformation.directoryTitle, 2))
        result.extend(self.getRstComposerIntroductionFormat(directoryInformation))
        for corpusWork in directoryInformation.works.values():
            result.extend(self.getRstComposerWorksFormat(corpusWork))
        return result

    def getRstComposerIntroductionFormat(self, directoryInformation):
        name = directoryInformation.directoryTitle
        directory = directoryInformation.directoryName
        isComposer = directoryInformation.isComposer
        
        result = []
        result.append('To get all works ')
        if isComposer:
            result.append('composed by {0},'.format(name))
        else:
            result.append('collected in {0},'.format(name))
        result.append('use :meth:`~music21.corpus.getComposer` ')
        result.append('to get all file paths.')
        result.append('')
        result.append('For example:')
        result.append('')
        result.append('::')
        result.append('')
        result.append('    >>> paths = corpus.getComposer({!r})'.format(
            directory))
        result.append('')
        return result

    def getRstComposerWorksFormat(self, corpusWork):
        result = []
        isSingleWork = True if len(corpusWork.files) == 1 else False
        #workTitle = common.toUnicode(workDict['title'])
        workTitle = unicode(corpusWork.title)
        worksAreVirtual = corpusWork.virtual
        if worksAreVirtual:
            workTitle += ' (*virtual*)'
        if isSingleWork is False:
            result.append(workTitle)
            result.append('')
        procedure = self.getRstWorkFileDictFormat
        if worksAreVirtual:
            procedure = self.getRstVirtualWorkFileDictFormat
        if isSingleWork is False:
            for corpusFile in corpusWork.files:
                result.extend(["- " + procedure(corpusFile), ''])
        else:
            result.append(procedure(corpusWork.files[0]))
            result.append('')
        return result

    def getRstVirtualWorkFileDictFormat(self, corpusFile):
        result = []
        result.append('- {0} *({1})*: `{2}`'.format(
            unicode(corpusFile.title),
            unicode(corpusFile.format),
            unicode(corpusFile.path),
            )) # TODO: does this actually work for a unicode title on Py2?
        result.append('')
        result.append('  Source: {0}'.format(
            unicode(corpusFile.url)))
        result.append('')
        return result

    def getRstWorkFileDictFormat(self, corpusFile):
        corpusPathWithoutSlashes = re.sub(
            '\\\\',
            '/',
            corpusFile.path,
            )
        result = '{0} *({1})*: `{2}`'.format(
            corpusFile.title,
            corpusFile.format,
            corpusPathWithoutSlashes,
            )
        return result


if __name__ == '__main__':
    import music21
    music21.mainTest()
